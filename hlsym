#!/usr/bin/env python3

import argparse as ap
import functools
import math
import os

DISPLAY_COLOR = True

RESET    = '\033[0m'
BLACK    = '\033[90m'
RED_BOLD = '\033[1;91m'

def tcol(s: str, color: str) -> str:
    return f'{color}{s}{RESET}'

def maxlen(strs: list[str]) -> int:
    return functools.reduce(lambda acc, cur: max(acc, len(cur)), strs, 0)

def lint(lines: list[str]) -> None:
    mxlen = maxlen(lines) - 1
    lines2 = map(lambda x: x.rstrip(), lines)
    lines2 = map(lambda x: x.ljust(mxlen), lines2)
    row = 1
    rowwidth = len(str(len(lines)))

    for l in lines2:
        out = []
        eql = True

        for i in range(len(l)):
            lhs = l[i]
            rhs = l[-1 - i]
            if DISPLAY_COLOR:
                if lhs == rhs:
                    out.append(f'{tcol(lhs, BLACK)}')
                else:
                    out.append(f'{tcol(lhs, RED_BOLD)}')
                    eql = False
            else:
                out.append(f'{lhs}')
                if lhs != rhs: eql = False

        linenr = str(row).ljust(rowwidth)
        if DISPLAY_COLOR:
            if eql: out.insert(0, f'   {tcol(linenr, BLACK)} |')
            else:   out.insert(0, f'!! {tcol(linenr, RED_BOLD)} |')
        else:
            if eql: out.insert(0, f'   {linenr} |')
            else:   out.insert(0, f'!! {linenr} |')

        print(''.join(out))
        row += 1

def check(lines: list[str]) -> bool:
    mxlen = maxlen(lines) - 1
    lines = map(lambda x: x.rstrip(), lines)
    lines = map(lambda x: x.ljust(mxlen), lines)
    for l in lines:
        for i in range(len(l)):
            lhs = l[i]
            rhs = l[-1 - i]
            if lhs != rhs: return False
    return True

if __name__ == '__main__':
    no_color = os.environ.get('NO_COLOR')
    if no_color is not None and len(no_color) > 0:
        DISPLAY_COLOR = False

    p = ap.ArgumentParser(description='ASCII art asymmetry linter.')
    p.add_argument('file', help='file to lint', type=str)
    p.add_argument('-q', '--quiet', help="don't output anything", action='store_true')
    args = p.parse_args()

    file:  str  = args.file
    quiet: bool = args.quiet

    if not os.path.exists(file): p.error('file does not exist')
    if not os.path.isfile(file): p.error('file is not a regular file')

    with open(file, 'r') as f:
        if quiet: exit(0 if check(f.readlines()) else 1)
        else:     lint(f.readlines())
